services:
  postgres:
    container_name: ms_pgs_sql
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:9411/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - microservices-net
    restart: unless-stopped


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${LOCAL_HOST}:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_BROKER_ID: 1
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

  mail-dev:
    container_name: ms-mail-dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - microservices-net
    restart: unless-stopped

  eureka-config-server:
    build:
      context: ./services/eureka-config-server
    container_name: eureka-config-server
    ports:
      - "8888:8888"
    environment:
      LOCAL_HOST: ${LOCAL_HOST}
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  eureka-discovery-server:
    build:
      context: ./services/eureka-discovery-server
    container_name: eureka-discovery-server
    ports:
      - "8761:8761"
    depends_on:
      eureka-config-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_LABEL: main
      CONFIG_ADDRESS: eureka-config-server
      LOCAL_HOST: ${LOCAL_HOST}
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${LOCAL_HOST}:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway-server:
    build:
      context: ./services/api-gateway-server
    container_name: api-gateway-server
    ports:
      - "8222:8222"
    depends_on:
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      LOCAL_HOST: ${LOCAL_HOST}
      CONFIG_ADDRESS: eureka-config-server
      DISCOVERY_ADDRESS: eureka-discovery-server
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:8222/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  customer-service:
    build:
      context: ./services/customer-service
    container_name: customer-service
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      api-gateway-server:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms_pgs_sql:5432/customer
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CONFIG_ADDRESS: eureka-config-server
      DISCOVERY_ADDRESS: eureka-discovery-server
      LOCAL_HOST: ${LOCAL_HOST}
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${LOCAL_HOST}:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  product-service:
    build:
      context: ./services/product-service
    container_name: product-service
    ports:
      - "8050:8080"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      api-gateway-server:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms_pgs_sql:5432/product
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CONFIG_ADDRESS: eureka-config-server
      LOCAL_HOST: ${LOCAL_HOST}
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:8050/actuator/health" ]
      interval: 60s
      timeout: 10s
      retries: 5


  cart-service:
    build:
      context: ./services/cart-service
    container_name: cart-service
    ports:
      - "8100:8080"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      api-gateway-server:
        condition: service_healthy
      product-service:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms_pgs_sql:5432/cart
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CUSTOMER_URL: ${CUSTOMER_URL}
      PRODUCT_URL: ${PRODUCT_URL}
      CONFIG_ADDRESS: eureka-config-server
      LOCAL_HOST: ${LOCAL_HOST}
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${LOCAL_HOST}:8100/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  order-service:
    build:
      context: ./services/order-service
    container_name: order-service
    ports:
      - "8070:8080"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      api-gateway-server:
        condition: service_healthy
      cart-service:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms_pgs_sql:5432/order
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CUSTOMER_URL: ${CUSTOMER_URL}
      PRODUCT_URL: ${PRODUCT_URL}
      CART_URL: ${CART_URL}
      PAYMENT_URL: ${PAYMENT_URL}
      CONFIG_ADDRESS: eureka-config-server
      LOCAL_HOST: ${LOCAL_HOST}
      KAFKA_BOOTSTRAP_SERVER_ADDRESS: http://${LOCAL_HOST}:9092
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${LOCAL_HOST}:8070/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  payment-service:
    build:
      context: ./services/payment-service
    container_name: payment-service
    ports:
      - "8060:8080"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      api-gateway-server:
        condition: service_healthy
      product-service:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms_pgs_sql:5432/payment
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CUSTOMER_URL: ${CUSTOMER_URL}
      PRODUCT_URL: ${PRODUCT_URL}
      CONFIG_ADDRESS: eureka-config-server
      LOCAL_HOST: ${LOCAL_HOST}
      KAFKA_BOOTSTRAP_SERVER_ADDRESS: http://${LOCAL_HOST}:9092
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:8100/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  notification-service:
    build:
      context: ./services/notification-service
    container_name: notification-service
    ports:
      - "8040:8080"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-config-server:
        condition: service_healthy
      eureka-discovery-server:
        condition: service_healthy
      api-gateway-server:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms_pgs_sql:5432/notification
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      CONFIG_ADDRESS: eureka-config-server
      LOCAL_HOST: ${LOCAL_HOST}
      KAFKA_BOOTSTRAP_SERVER_ADDRESS: http://${LOCAL_HOST}:9092
      MAIL_SERVER_ADDRESS: ms-mail-dev
      ZIPKIN_ADDRESS: zipkin
    networks:
      - microservices-net
    restart: unless-stopped

  keycloak:
    container_name: keycloak-ms
    image: quay.io/keycloak/keycloak:24.0.2
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8080:8080"
    networks:
      - microservices-net
    command:
    - "start-dev"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${LOCAL_HOST}:8080/auth" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres-data:
