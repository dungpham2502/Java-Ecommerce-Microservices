server:
  port: 8040

eureka:
  client:
    serviceUrl:
      defaultZone: http://${LOCAL_HOST}:8761/eureka/
  instance:
    preferIpAddress: true

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER_ADDRESS}
      group-id: paymentGroup,orderGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        spring.json.type.mapping: orderConfirmation:com.example.ecommerce.order.entity.OrderConfirmation,paymentConfirmation:com.example.ecommerce.payment.entity.PaymentConfirmation

#  mail:
#    host: ${MAIL_SERVER_ADDRESS}
#    port: 1025
#    username: ${MAIL_USER}
#    password: ${MAIL_PASSWORD}
#    properties:
#      mail:
#        smtp:
#          trust: "*"
#        auth: true
#        starttls:
#          enabled: true
#        connectiontimeout: 5000
#        timeout: 3000
#        writetimeout: 5000
